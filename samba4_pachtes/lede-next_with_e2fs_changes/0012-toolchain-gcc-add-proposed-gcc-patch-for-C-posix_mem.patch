From 4821ce103722e3b5331f1a9c5764e3b105b0b0ea Mon Sep 17 00:00:00 2001
From: Dirk Neukirchen <dirkneukirchen@web.de>
Date: Mon, 23 May 2016 18:54:42 +0200
Subject: [PATCH 12/69] toolchain/gcc: add proposed gcc patch for
 C++/posix_memalign

instead of disabling the packages on x86 patch gcc:
see
http://lists.busybox.net/pipermail/buildroot/2015-October/142571.html

and gcc discussion
https://gcc.gnu.org/ml/gcc-patches/2015-05/msg01433.html
https://gcc.gnu.org/ml/gcc-patches/2015-11/msg01750.html
https://patchwork.ozlabs.org/patch/462889/
https://patchwork.ozlabs.org/patch/544393/

use patch from voidlinux (uses musl libc)

fixes: elektra package

Signed-off-by: Dirk Neukirchen <dirkneukirchen@web.de>
---
 .../999-voidlinux-musl-posix_memalign-c++.patch    | 30 ++++++++++++++++++++++
 1 file changed, 30 insertions(+)
 create mode 100644 toolchain/gcc/patches/5.3.0/999-voidlinux-musl-posix_memalign-c++.patch

diff --git a/toolchain/gcc/patches/5.3.0/999-voidlinux-musl-posix_memalign-c++.patch b/toolchain/gcc/patches/5.3.0/999-voidlinux-musl-posix_memalign-c++.patch
new file mode 100644
index 0000000..8297a0b
--- /dev/null
+++ b/toolchain/gcc/patches/5.3.0/999-voidlinux-musl-posix_memalign-c++.patch
@@ -0,0 +1,30 @@
+diff --git gcc/config/i386/pmm_malloc.h gcc/config/i386/pmm_malloc.h
+index 901001b..321fcd3 100644
+--- a/gcc/config/i386/pmm_malloc.h
++++ b/gcc/config/i386/pmm_malloc.h
+@@ -27,12 +27,13 @@
+ #include <stdlib.h>
+
+ /* We can't depend on <stdlib.h> since the prototype of posix_memalign
+-   may not be visible.  */
++   may not be visible and we can't pollute the namespace either.  */
+ #ifndef __cplusplus
+-extern int posix_memalign (void **, size_t, size_t);
++extern int __gcc_posix_memalign (void **, size_t, size_t)
+ #else
+-extern "C" int posix_memalign (void **, size_t, size_t) throw ();
++extern "C" int __gcc_posix_memalign (void **, size_t, size_t) throw ()
+ #endif
++__asm__("posix_memalign");
+
+ static __inline void *
+ _mm_malloc (size_t size, size_t alignment)
+@@ -42,7 +43,7 @@  _mm_malloc (size_t size, size_t alignment)
+     return malloc (size);
+   if (alignment == 2 || (sizeof (void *) == 8 && alignment == 4))
+     alignment = sizeof (void *);
+-  if (posix_memalign (&ptr, alignment, size) == 0)
++  if (__gcc_posix_memalign (&ptr, alignment, size) == 0)
+     return ptr;
+   else
+     return NULL;
-- 
2.10.0

