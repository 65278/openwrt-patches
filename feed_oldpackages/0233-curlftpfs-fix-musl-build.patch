From d62a77d6d889176f27d1226efd0a9adb92d4dff3 Mon Sep 17 00:00:00 2001
From: Dirk Neukirchen <dirkneukirchen@web.de>
Date: Thu, 9 Jul 2015 13:10:49 +0200
Subject: [PATCH 233/310] curlftpfs: fix musl build

Signed-off-by: Dirk Neukirchen <dirkneukirchen@web.de>
---
 .../001-debian-consistent-feature-flag.patch       | 60 ++++++++++++++++++++++
 net/curlftpfs/patches/001-fedora-bz831417.patch    | 21 ++++++++
 net/curlftpfs/patches/001-uclibc_mod.patch         | 37 -------------
 net/curlftpfs/patches/001-uclibc_refresh.patch     | 20 ++++++++
 .../patches/002-debian-no_verify_hostname.patch    | 21 ++++++++
 net/curlftpfs/patches/002-fedora-bz962015.patch    | 33 ++++++++++++
 net/curlftpfs/patches/010-musl-off_t.patch         | 29 +++++++++++
 .../patches/curlftpfs-0.9.2-memleak#591298.patch   | 15 ++++++
 .../curlftpfs-0.9.2-memleak-cached#591299.patch    | 53 +++++++++++++++++++
 9 files changed, 252 insertions(+), 37 deletions(-)
 create mode 100644 net/curlftpfs/patches/001-debian-consistent-feature-flag.patch
 create mode 100644 net/curlftpfs/patches/001-fedora-bz831417.patch
 delete mode 100644 net/curlftpfs/patches/001-uclibc_mod.patch
 create mode 100644 net/curlftpfs/patches/001-uclibc_refresh.patch
 create mode 100644 net/curlftpfs/patches/002-debian-no_verify_hostname.patch
 create mode 100644 net/curlftpfs/patches/002-fedora-bz962015.patch
 create mode 100644 net/curlftpfs/patches/010-musl-off_t.patch
 create mode 100644 net/curlftpfs/patches/curlftpfs-0.9.2-memleak#591298.patch
 create mode 100644 net/curlftpfs/patches/curlftpfs-0.9.2-memleak-cached#591299.patch

diff --git a/net/curlftpfs/patches/001-debian-consistent-feature-flag.patch b/net/curlftpfs/patches/001-debian-consistent-feature-flag.patch
new file mode 100644
index 0000000..71a37fe
--- /dev/null
+++ b/net/curlftpfs/patches/001-debian-consistent-feature-flag.patch
@@ -0,0 +1,60 @@
+Author: Vincent Bernat
+Subject: ensure consistent use of _XOPEN_SOURCE
+
+See bug #748143
+
+Index: curlftpfs-0.9.2/Makefile.am
+===================================================================
+--- curlftpfs-0.9.2.orig/Makefile.am
++++ curlftpfs-0.9.2/Makefile.am
+@@ -5,7 +5,7 @@ DIST_SUBDIRS = $(SUBDIRS) tests
+ 
+ LIBICONV = @LIBICONV@
+ 
+-AM_CPPFLAGS = -DFUSE_USE_VERSION=26
++AM_CPPFLAGS = -DFUSE_USE_VERSION=26 -D_XOPEN_SOURCE=600
+ AM_LDFLAGS = $(LIBICONV)
+ 
+ bin_PROGRAMS = curlftpfs
+Index: curlftpfs-0.9.2/ftpfs-ls.c
+===================================================================
+--- curlftpfs-0.9.2.orig/ftpfs-ls.c
++++ curlftpfs-0.9.2/ftpfs-ls.c
+@@ -6,12 +6,6 @@
+     See the file COPYING.
+ */
+ 
+-#ifndef __FreeBSD__
+-#define _XOPEN_SOURCE 600
+-#else
+-#define _XOPEN_SOURCE
+-#endif
+-
+ #include <time.h>
+ #include <string.h>
+ #include <sys/types.h>
+Index: curlftpfs-0.9.2/tests/Makefile.am
+===================================================================
+--- curlftpfs-0.9.2.orig/tests/Makefile.am
++++ curlftpfs-0.9.2/tests/Makefile.am
+@@ -2,7 +2,7 @@ EXTRA_DIST = run_tests.sh
+ 
+ noinst_PROGRAMS = ftpfs-ls_unittest
+ 
+-AM_CPPFLAGS = -DFUSE_USE_VERSION=25
++AM_CPPFLAGS = -DFUSE_USE_VERSION=25 -D_XOPEN_SOURCE=600
+ 
+ ftpfs_ls_unittest_SOURCES = ftpfs-ls_unittest.c
+ if FUSE_OPT_COMPAT
+Index: curlftpfs-0.9.2/tests/ftpfs-ls_unittest.c
+===================================================================
+--- curlftpfs-0.9.2.orig/tests/ftpfs-ls_unittest.c
++++ curlftpfs-0.9.2/tests/ftpfs-ls_unittest.c
+@@ -6,7 +6,6 @@
+     See the file COPYING.
+ */
+ 
+-#define _XOPEN_SOURCE 600  /* glibc2 needs this */
+ #include <time.h>                                                        
+ #include <stdlib.h>
+ #include <stdio.h>
diff --git a/net/curlftpfs/patches/001-fedora-bz831417.patch b/net/curlftpfs/patches/001-fedora-bz831417.patch
new file mode 100644
index 0000000..35a910c
--- /dev/null
+++ b/net/curlftpfs/patches/001-fedora-bz831417.patch
@@ -0,0 +1,21 @@
+@@ -, +, @@ 
+ ftpfs.c |    4 	2 +	2 -	0 !
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+--- b/ftpfs.c	
++++ b/ftpfs.c	
+@@ -503,7 +503,6 @@ static void *ftpfs_write_thread(void *da
+   
+   curl_easy_setopt_or_die(fh->write_conn, CURLOPT_URL, fh->full_path);
+   curl_easy_setopt_or_die(fh->write_conn, CURLOPT_UPLOAD, 1);
+-  curl_easy_setopt_or_die(fh->write_conn, CURLOPT_INFILESIZE, -1);
+   curl_easy_setopt_or_die(fh->write_conn, CURLOPT_READFUNCTION, write_data_bg);
+   curl_easy_setopt_or_die(fh->write_conn, CURLOPT_READDATA, fh);
+   curl_easy_setopt_or_die(fh->write_conn, CURLOPT_LOW_SPEED_LIMIT, 1);
+@@ -645,7 +645,6 @@ static int create_empty_file(const char 
+   pthread_mutex_lock(&ftpfs.lock);
+   cancel_previous_multi();
+   curl_easy_setopt_or_die(ftpfs.connection, CURLOPT_URL, full_path);
+-  curl_easy_setopt_or_die(ftpfs.connection, CURLOPT_INFILESIZE, 0);
+   curl_easy_setopt_or_die(ftpfs.connection, CURLOPT_UPLOAD, 1);
+   curl_easy_setopt_or_die(ftpfs.connection, CURLOPT_READDATA, NULL);
+   CURLcode curl_res = curl_easy_perform(ftpfs.connection);
diff --git a/net/curlftpfs/patches/001-uclibc_mod.patch b/net/curlftpfs/patches/001-uclibc_mod.patch
deleted file mode 100644
index 8eb1556..0000000
--- a/net/curlftpfs/patches/001-uclibc_mod.patch
+++ /dev/null
@@ -1,37 +0,0 @@
-diff -cr curlftpfs-0.9.2/ftpfs-ls.c curlftpfs-0.9.2-1/ftpfs-ls.c
-*** curlftpfs-0.9.2/ftpfs-ls.c	2008-04-23 12:55:41.000000000 +0200
---- curlftpfs-0.9.2-1/ftpfs-ls.c	2009-09-24 23:19:03.000000000 +0200
-***************
-*** 58,64 ****
-                 "%5s"  "%*c"
-                 "%1023c",
-                 mode, &nlink, user, group, &size, month, day, year, file);
-!   if (res < 9) {
-      res = sscanf(line,
-                   "%11s"
-                   "%32s" SPACES
---- 58,64 ----
-                 "%5s"  "%*c"
-                 "%1023c",
-                 mode, &nlink, user, group, &size, month, day, year, file);
-!   if (res < 8) {
-      res = sscanf(line,
-                   "%11s"
-                   "%32s" SPACES
-***************
-*** 69,75 ****
-                   "%5s"  "%*c"
-                   "%1023c",
-                   mode, user, group, &size, month, day, year, file);
-!     if (res < 8) {
-        return 0;
-      }
-    }
---- 69,75 ----
-                   "%5s"  "%*c"
-                   "%1023c",
-                   mode, user, group, &size, month, day, year, file);
-!     if (res < 7) {
-        return 0;
-      }
-    }
diff --git a/net/curlftpfs/patches/001-uclibc_refresh.patch b/net/curlftpfs/patches/001-uclibc_refresh.patch
new file mode 100644
index 0000000..3efd548
--- /dev/null
+++ b/net/curlftpfs/patches/001-uclibc_refresh.patch
@@ -0,0 +1,20 @@
+--- a/ftpfs-ls.c
++++ b/ftpfs-ls.c
+@@ -52,7 +52,7 @@ static int parse_dir_unix(const char *li
+                "%5s"  "%*c"
+                "%1023c",
+                mode, &nlink, user, group, &size, month, day, year, file);
+-  if (res < 9) {
++  if (res < 8) {
+     res = sscanf(line,
+                  "%11s"
+                  "%32s" SPACES
+@@ -63,7 +63,7 @@ static int parse_dir_unix(const char *li
+                  "%5s"  "%*c"
+                  "%1023c",
+                  mode, user, group, &size, month, day, year, file);
+-    if (res < 8) {
++    if (res < 7) {
+       return 0;
+     }
+   }
diff --git a/net/curlftpfs/patches/002-debian-no_verify_hostname.patch b/net/curlftpfs/patches/002-debian-no_verify_hostname.patch
new file mode 100644
index 0000000..578eaa7
--- /dev/null
+++ b/net/curlftpfs/patches/002-debian-no_verify_hostname.patch
@@ -0,0 +1,21 @@
+Author: Georg Oechsler
+Subject: Fix no_verify_hostname option with recent versions of curl
+
+Index: curlftpfs-0.9.2/ftpfs.c
+===================================================================
+--- curlftpfs-0.9.2.orig/ftpfs.c
++++ curlftpfs-0.9.2/ftpfs.c
+@@ -1626,9 +1626,10 @@ static void set_common_curl_stuff(CURL*
+   }
+ 
+   if (ftpfs.no_verify_hostname) {
+-    /* The default is 2 which verifies even the host string. This sets to 1
+-     * which means verify the host but not the string. */
+-    curl_easy_setopt_or_die(easy, CURLOPT_SSL_VERIFYHOST, 1);
++    /* The default is 2 which verifies even the host string. This sets
++     * to 0 which means the connection succeeds regardless of the names
++     * in the certificate. */
++    curl_easy_setopt_or_die(easy, CURLOPT_SSL_VERIFYHOST, 0);
+   }
+ 
+   curl_easy_setopt_or_die(easy, CURLOPT_INTERFACE, ftpfs.interface);
diff --git a/net/curlftpfs/patches/002-fedora-bz962015.patch b/net/curlftpfs/patches/002-fedora-bz962015.patch
new file mode 100644
index 0000000..4389d9d
--- /dev/null
+++ b/net/curlftpfs/patches/002-fedora-bz962015.patch
@@ -0,0 +1,33 @@
+diff -NaurEbBH -x '*.Plo' -x Makefile -x '*.log' -x '*.status' -x '*.list' -x '*.Po' -x libtool -x nbproject curlftpfs-0.9.2.orig/ftpfs.c curlftpfs-0.9.2/ftpfs.c
+--- curlftpfs-0.9.2.orig/ftpfs.c	2013-05-12 14:31:57.000000000 +0400
++++ curlftpfs-0.9.2/ftpfs.c	2013-05-12 14:29:00.906721322 +0400
+@@ -759,13 +759,13 @@
+ 		err = -ENOTSUP;
+ 	  }
+ 	  
+-	  if ((fi->flags & O_EXCL))
+-	  {
+-		DEBUG(1, "opening %s with O_EXCL - testing existence\n", path);
+-		int exists_r = test_exists(path);
+-		if (exists_r != -ENOENT)
+-			err = -EACCES;
+-	  }
++//	  if ((fi->flags & O_EXCL))
++//	  {
++//		DEBUG(1, "opening %s with O_EXCL - testing existence\n", path);
++//		int exists_r = test_exists(path);
++//		if (exists_r != -ENOENT)
++//			err = -EACCES;
++//	  }
+ 	  
+ 	  if (!err)
+ 	  {
+@@ -816,6 +816,8 @@
+ #if FUSE_VERSION >= 25
+ static int ftpfs_create(const char* path, mode_t mode,
+                         struct fuse_file_info* fi) {
++//	return ftpfs_open_common(path, mode, fi);
++	ftpfs_mknod(path, mode, NULL);
+   return ftpfs_open_common(path, mode, fi);
+ }
+ #endif
diff --git a/net/curlftpfs/patches/010-musl-off_t.patch b/net/curlftpfs/patches/010-musl-off_t.patch
new file mode 100644
index 0000000..cd3e01e
--- /dev/null
+++ b/net/curlftpfs/patches/010-musl-off_t.patch
@@ -0,0 +1,29 @@
+--- a/ftpfs.c
++++ b/ftpfs.c
+@@ -687,7 +687,7 @@ static int test_exists(const char* path)
+ 	return ftpfs_getattr(path, &sbuf);
+ }
+ 
+-static __off_t test_size(const char* path)
++static off_t test_size(const char* path)
+ {
+ 	struct stat sbuf;
+ 	int err = ftpfs_getattr(path, &sbuf);
+@@ -952,7 +952,7 @@ static int ftpfs_truncate(const char* pa
+ 
+   /* fix openoffice problem, truncating exactly to file length */
+   
+-  __off_t size = (long long int)test_size(path); 
++  off_t size = (long long int)test_size(path); 
+   DEBUG(1, "ftpfs_truncate: %s check filesize=%lld\n", path, (long long int)size);
+   
+   if (offset == size)  
+@@ -980,7 +980,7 @@ static int ftpfs_ftruncate(const char *
+   }
+   /* fix openoffice problem, truncating exactly to file length */
+   
+-  __off_t size = test_size(path); 
++  off_t size = test_size(path); 
+   DEBUG(1, "ftpfs_ftruncate: %s check filesize=%lld\n", path, (long long int)size);
+   
+   if (offset == size)  
diff --git a/net/curlftpfs/patches/curlftpfs-0.9.2-memleak#591298.patch b/net/curlftpfs/patches/curlftpfs-0.9.2-memleak#591298.patch
new file mode 100644
index 0000000..94f46ba
--- /dev/null
+++ b/net/curlftpfs/patches/curlftpfs-0.9.2-memleak#591298.patch
@@ -0,0 +1,15 @@
+@@ -, +, @@ 
+---
+ ftpfs.c |    2 	2 +	0 -	0 !
+ 1 file changed, 2 insertions(+)
+--- b/ftpfs.c	
++++ b/ftpfs.c	
+@@ -615,6 +615,8 @@ static void free_ftpfs_file(struct ftpfs
+   sem_destroy(&fh->data_need);
+   sem_destroy(&fh->data_written);
+   sem_destroy(&fh->ready);
++  if (fh->buf.size) { buf_free(&fh->buf); }
++  if (fh->stream_buf.size) { buf_free(&fh->stream_buf); }
+   free(fh);
+ }
+ 
diff --git a/net/curlftpfs/patches/curlftpfs-0.9.2-memleak-cached#591299.patch b/net/curlftpfs/patches/curlftpfs-0.9.2-memleak-cached#591299.patch
new file mode 100644
index 0000000..11e1f5f
--- /dev/null
+++ b/net/curlftpfs/patches/curlftpfs-0.9.2-memleak-cached#591299.patch
@@ -0,0 +1,53 @@
+--- b/cache.c	
++++ b/cache.c	
+@@ -25,7 +25,7 @@ struct cache {
+     time_t last_cleaned;
+ };
+ 
+-static struct cache cache;
++struct cache cache;
+ 
+ struct node {
+     struct stat stat;
+--- b/ftpfs-ls.c	
++++ b/ftpfs-ls.c	
+@@ -25,6 +25,13 @@ 
+ #include "charset_utils.h"
+ #include "ftpfs-ls.h"
+ 
++struct cache {
++    int on;
++    char incomplete[];
++};
++
++extern struct cache cache;
++
+ static int parse_dir_unix(const char *line,
+                           struct stat *sbuf,
+                           char *file,
+@@ -243,8 +250,10 @@ int parse_dir(const char* list, const ch
+           reallink = g_strdup(link);
+         }
+         int linksize = strlen(reallink);
+-        cache_add_link(full_path, reallink, linksize+1);
+-        DEBUG(1, "cache_add_link: %s %s\n", full_path, reallink);
++        if (cache.on) {
++          cache_add_link(full_path, reallink, linksize+1);
++          DEBUG(1, "cache_add_link: %s %s\n", full_path, reallink);
++        }
+         if (linkbuf && linklen) {
+           if (linksize > linklen) linksize = linklen - 1;
+           strncpy(linkbuf, reallink, linksize);
+@@ -257,8 +266,10 @@ int parse_dir(const char* list, const ch
+         DEBUG(1, "filler: %s\n", file);
+         filler(h, file, &stat_buf);
+       } else {
+-        DEBUG(1, "cache_add_attr: %s\n", full_path);
+-        cache_add_attr(full_path, &stat_buf);
++        if (cache.on) {
++          DEBUG(1, "cache_add_attr: %s\n", full_path);
++          cache_add_attr(full_path, &stat_buf);
++        }
+       }
+ 
+       DEBUG(2, "comparing %s %s\n", name, file);
-- 
2.5.0

